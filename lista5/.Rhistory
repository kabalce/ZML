library(mvtnorm)
library(nlme)
corr<- corCompSymm(form=~1|id)
wei  <-  varIdent(form=~1)
generate_X <- function(n, k, p){
matrix(rnorm(n*k*(p-1), 0, 1/sqrt(n*k)),  n*k, p-1)
}
generate_sigma <- function(n, k, p){
sigma <- matrix(rep(ro, k^2), k, k)
diag(sigma) <- rep(1, k)
sigma <- sigma  * gama^2
}
generate_Y <-  function(n, k, p,  X, sigma){
Y <- as.vector(sapply(seq(n), function(i){
Xbeta <-  matrix(1, k,  p)
Xbeta[,2:p] <- X[seq((i-1)*k+1,i*k), ]
Xbeta <-  Xbeta%*%beta
rmvnorm(1, Xbeta, sigma)}))
id <-  as.vector(sapply(seq(n), function(i)(rep(i, k))))
Tvec <-  rep(seq(k), n)
data.frame(Y, id, Tvec, X0=rep(1,  n*k), X)
}
cov_beta <- function(sigma_est1, n=20, k=3, p=4, dataf){
id <- seq(n)
res1 <- matrix(rep(0), p, p)
for(i in id){
x <- dataf[which(dataf$id==i),4:(p+3)]
res1 <- res1 + t(as.matrix(x))%*%sigma_est1%*%as.matrix(x)
}
solve(res1)
}
generate_estimators <- function(n, k, p,  X, sigma){
dataf <- generate_Y(n, k, p,  X, sigma)
mod1 <- gls(Y~.-id -Tvec -X0, dataf, corr, wei, method="REML")
sigma_est <-  getVarCov(mod1)
s <- solve(sigma_est)
res2 <- rep(0, p)
for(i in seq(n)){
x <- dataf[dataf$id==i,4:(p+3)]
res2 <- res2 + t(x)%*%s%*%dataf$Y[dataf$id==i]
}
cov_beta_est <-  cov_beta(sigma_est, n, k, p, dataf)
beta_est <- cov_beta_est%*%res2
est_gamma  <- sqrt(diag(sigma_est)[1])
est_ro <-  sig[1,2]/diag(sigma_est)[1]
c(beta_est, est_gamma, est_ro)
}
generate_results <- function(n, k, p, times=500){
X <-  generate_X(n=n, k=k, p=p)
sigma <-  generate_sigma(n, k, p)
sapply(rep(n, times), generate_estimators, k, p,  X, sigma)
}
set.seed(128)
ro <- 0.3
gama <- 2
# Zad 2
z2 <- generate_results(n=20, k=3, p=4)
beta <- c(0, 3, 3, 0)
generate_X <- function(n, k, p){
matrix(rnorm(n*k*(p-1), 0, 1/sqrt(n*k)),  n*k, p-1)
}
generate_sigma <- function(n, k, p){
sigma <- matrix(rep(ro, k^2), k, k)
diag(sigma) <- rep(1, k)
sigma <- sigma  * gama^2
}
generate_Y <-  function(n, k, p,  X, sigma){
Y <- as.vector(sapply(seq(n), function(i){
Xbeta <-  matrix(1, k,  p)
Xbeta[,2:p] <- X[seq((i-1)*k+1,i*k), ]
Xbeta <-  Xbeta%*%beta
rmvnorm(1, Xbeta, sigma)}))
id <-  as.vector(sapply(seq(n), function(i)(rep(i, k))))
Tvec <-  rep(seq(k), n)
data.frame(Y, id, Tvec, X0=rep(1,  n*k), X)
}
cov_beta <- function(sigma_est1, n=20, k=3, p=4, dataf){
id <- seq(n)
res1 <- matrix(rep(0), p, p)
for(i in id){
x <- dataf[which(dataf$id==i),4:(p+3)]
res1 <- res1 + t(as.matrix(x))%*%sigma_est1%*%as.matrix(x)
}
solve(res1)
}
generate_estimators <- function(n, k, p,  X, sigma){
dataf <- generate_Y(n, k, p,  X, sigma)
mod1 <- gls(Y~.-id -Tvec -X0, dataf, corr, wei, method="REML")
sigma_est <-  getVarCov(mod1)
s <- solve(sigma_est)
res2 <- rep(0, p)
for(i in seq(n)){
x <- dataf[dataf$id==i,4:(p+3)]
res2 <- res2 + t(x)%*%s%*%dataf$Y[dataf$id==i]
}
cov_beta_est <-  cov_beta(sigma_est, n, k, p, dataf)
beta_est <- cov_beta_est%*%res2
est_gamma  <- sqrt(diag(sigma_est)[1])
est_ro <-  sig[1,2]/diag(sigma_est)[1]
c(beta_est, est_gamma, est_ro)
}
generate_results <- function(n, k, p, times=500){
X <-  generate_X(n=n, k=k, p=p)
sigma <-  generate_sigma(n, k, p)
sapply(rep(n, times), generate_estimators, k, p,  X, sigma)
}
set.seed(128)
ro <- 0.3
gama <- 2
beta <- c(0, 3, 3, 0)
# Zad 2
z2 <- generate_results(n=20, k=3, p=4)
generate_estimators <- function(n, k, p,  X, sigma){
dataf <- generate_Y(n, k, p,  X, sigma)
mod1 <- gls(Y~.-id -Tvec -X0, dataf, corr, wei, method="REML")
sigma_est <-  getVarCov(mod1)
s <- solve(sigma_est)
res2 <- rep(0, p)
for(i in seq(n)){
x <- dataf[dataf$id==i,4:(p+3)]
res2 <- res2 + t(x)%*%s%*%dataf$Y[dataf$id==i]
}
cov_beta_est <-  cov_beta(sigma_est, n, k, p, dataf)
beta_est <- cov_beta_est%*%res2
est_gamma  <- sqrt(diag(sigma_est)[1])
est_ro <-  sigma_est[1,2]/diag(sigma_est)[1]
c(beta_est, est_gamma, est_ro)
}
generate_results <- function(n, k, p, times=500){
X <-  generate_X(n=n, k=k, p=p)
sigma <-  generate_sigma(n, k, p)
sapply(rep(n, times), generate_estimators, k, p,  X, sigma)
}
set.seed(128)
ro <- 0.3
gama <- 2
beta <- c(0, 3, 3, 0)
# Zad 2
z2 <- generate_results(n=20, k=3, p=4)
# Zad 3
z3 <-  generate_results(n=100, k=3, p=4)
# Zad 4
z4 <- generate_results(n=100, k=15, p=4)
# Zad 5
z5 <- generate_results(n=100, k=20, p=4)
generate_estimators6 <- function(n, k, p,  X, sigma){
dataf <- generate_Y(n, k, p,  X, sigma)
mod1 <- gls(Y~.-id -Tvec -X0, dataf, corr, wei, method="ML")
sigma_est <-  getVarCov(mod1)
s <- solve(sigma_est)
res2 <- rep(0, p)
for(i in seq(n)){
x <- dataf[dataf$id==i,4:(p+3)]
res2 <- res2 + t(x)%*%s%*%dataf$Y[dataf$id==i]
}
cov_beta_est <-  cov_beta(sigma_est, n, k, p, dataf)
beta_est <- cov_beta_est%*%res2
est_gamma  <- sqrt(diag(sigma_est)[1])
est_ro <-  sig[1,2]/diag(sigma_est)[1]
c(beta_est, est_gamma, est_ro)
}
generate_results6 <- function(n, k, p, times=500){
X <-  generate_X(n=n, k=k, p=p)
sigma <-  generate_sigma(n, k, p)
sapply(rep(n, times), generate_estimators, k, p,  X, sigma)
}
# Zad 2
zz2 <-  generate_results6(n=20, k=3, p=4)
# Zad 3
zz3 <-generate_results6(n=100, k=3, p=4)
# Zad 4
zz4 <-generate_results6(n=100, k=15, p=4)
# Zad 5
zz5 <-generate_results6(n=100, k=20, p=4)
hist(zz2[1,], main = "Histogram b0")
hist(zz2[1,], main = "Histogram b0", breaks = seq(-0.15, 0.17, 0.01))
hist(zz2[2,], main = "Histogram b1")
zz2
hist(zz2[2,], main = "Histogram b1", breaks = seq(-0.15, 0.17, 0.01))
hist(zz2[2,], main = "Histogram b1", breaks = seq(-0.15, 1.6, 0.1))
hist(zz2[2,], main = "Histogram b1", breaks = seq(-0.2, 1.6, 0.1))
hist(zz2[2,], main = "Histogram b1", breaks = seq(-0.3, 1.6, 0.1))
zz2[2,]
hist(zz2[5,], main = "Histogram gamma")
hist(zz2[6,], main = "Histogram ro")
hist(zz2[1,], main = "Histogram b0")
hist(zz2[2,], main = "Histogram b1")
hist(zz2[5,], main = "Histogram gamma")
hist(zz2[6,], main = "Histogram ro")
hist(zz3[1,], main = "Histogram b0")
hist(zz3[2,], main = "Histogram b1")
hist(zz3[5,], main = "Histogram gamma")
hist(zz3[6,], main = "Histogram ro")
hist(zz4[1,], main = "Histogram b0")
hist(zz4[2,], main = "Histogram b1")
hist(zz4[5,], main = "Histogram gamma")
hist(zz4[6,], main = "Histogram ro")
hist(zz4[2,], main = "Histogram b1")
hist(zz5[6,], main = "Histogram ro")
hist(zz5[2,], main = "Histogram b1")
mean(zz5[2,])
mean(zz4[2,])
mean(zz2[2,])
mean(zz3[2,])
mean(z3[2,])
mean(z3[3,])
mean(z3[4,])
save.image("~/Dokumenty/ZML/lista5/dane.RData")
